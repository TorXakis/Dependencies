########################################################################################################################
#                      USAGE
########################################################################################################################
# run below command on arm64 machine(eg. m1 macbook) and the build distribution file will be put in the ./dist/ folder
#
#    docker build -f Dockerfile.ubuntu16.04_cvc4-1.7 --target dist --output dist/ .
#
# The resulting distribution file 'cvc4-1.7.tgz' contains a z3 static binary which works on ubuntu16.04 and newer !! 
# You can extract the cvc4 executable with the command:
#
#     tar xzvf cvc4-1.7.tgz --strip-components 2  usr/bin
#
# and just deploy this binary on any linux version ubuntu 16.04 or newer !! 
########################################################################################################################

# syntax = docker/dockerfile:1.3-labs

# This Dockerfile requires buildkit as backend, so make sure you set:
# export DOCKER_BUILDKIT=1

# use ARG instead ENV because ARG works over multiple stages, and ENV only in on stage
ARG BUILDDIR=/build

# DOCUMENTATION:
# src https://github.com/CVC4/CVC4-archived/blob/master/INSTALL.md
#
# Building CVC4
#
#     ./contrib/get-antlr-3.4  # download and build ANTLR
#     ./configure.sh   # use --prefix to specify a prefix (default: /usr/local)
#                      # use --name=<PATH> for custom build directory
#     cd <build_dir>   # default is ./build
#     make             # use -jN for parallel build with N threads
#     make check       # to run default set of tests
#     make install     # to install into the prefix specified above


#############################
FROM ubuntu:16.04 AS build
#############################
ARG BUILDDIR

# Make persist in image
ENV BUILDDIR=$BUILDDIR 


WORKDIR ${BUILDDIR}

RUN apt-get update && \
  apt-get install -y \
  wget \
  python3 \
  binutils \
  gcc \
  g++ \
  make \
  cmake \
  patch \
  antlr3 \
  antlr3.2 \
  libantlr3c-dev \
  libgmp-dev \
  git

# note: macos homebrew formule at https://github.com/TorXakis/homebrew-TorXakis/blob/master/Formula/cvc4%401.7.rb
#       uses instead of antlr3.2 package the script 'contrib/get-antlr-3.4' inside the source 

#RUN wget https://github.com/CVC4/CVC4-archived/archive/refs/tags/1.7.tar.gz
#RUN tar xzvf 1.7.tar.gz

RUN wget https://github.com/TorXakis/Dependencies/releases/download/cvc4_1.7/cvc4-1.7.source.tar.gz
RUN tar xzvf cvc4-1.7.source.tar.gz

# get patch
RUN wget https://github.com/TorXakis/Dependencies/releases/download/cvc4_1.7/cvc4-1.7_get-antlr-3.4.patch

#apply patch
RUN patch cvc5-1.7/contrib/get-antlr-3.4  cvc4-1.7_get-antlr-3.4.patch

WORKDIR ${BUILDDIR}/cvc5-1.7/



# https://askubuntu.com/questions/308045/differences-between-bin-sbin-usr-bin-usr-sbin-usr-local-bin-usr-local
#  /usr/bin: for general system-wide binaries.
#  /usr/local/bin: for system-wide available scripts.
#                  The local path means it's not managed by the system packages (this is an error for Debian/Ubuntu packages).
#   ~/bin (a personal bin folder in your home directory): for user-scoped scripts
# note:
#  The FHS says for /usr/local:
#    Tertiary hierarchy for local data, specific to this host. Typically has further subdirectories, e.g., bin/, lib/, share/.
#
# So prefer /usr/ above /usr/local because linux package system installs by default in /usr  => want to make package
# Note: both in /usr/ and /usr/local you must install with sudo.
ENV PREFIX=/usr/


# configure
# IMPORTANT: we use option "--static-binary" to make statically linked z3 binary => easy to install by just only copying this binary
# note: --static does same as --static-binary, however added it to be sure.
RUN ./contrib/get-symfpu
RUN ./configure.sh --static --static-binary --prefix=$PREFIX --symfpu

# build
RUN cd build && make -j$(nproc) 

# BUG FIX in install script:
# next line removes RPATH_CHANGE command which causes install problem => bug in static build, because there we do not need RPATH in executable
RUN cd build && sed -i '45,48d' src/main/cmake_install.cmake

# install
RUN cd build && make install DESTDIR=${BUILDDIR}/destdir
RUN tar -C ${BUILDDIR}/destdir  -czvf /cvc4-1.7.tgz  $(ls ${BUILDDIR}/destdir)



#############################
FROM scratch AS dist
#############################
# make scratch image only containing z3-4.8.7.tgz file build
# usage:  docker build --target dist --output . .
# The build z3-4.8.7.tgz will be put in current directory! (--output .)
COPY --from=build /cvc4-1.7.tgz /