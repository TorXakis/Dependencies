########################################################################################################################
#                      USAGE
########################################################################################################################
# run below command on arm64 machine(eg. m1 macbook) and the build distribution file will be put in the ./dist/ folder
#
#    docker build -f Dockerfile.ubuntu16.04_z3-4.8.7 --target dist --output dist/ .
#
# The resulting distribution file 'z3-4.8.7.tgz' contains a z3 static binary which works on ubuntu16.04 and newer !! 
# You can extract the z3 executable with the command:
#
#     tar xzvf z3-4.8.7.tgz --strip-components 2  usr/bin
#
# and just deploy this binary on any linux version ubuntu 16.04 or newer !! 
########################################################################################################################

# syntax = docker/dockerfile:1.3-labs

# This Dockerfile requires buildkit as backend, so make sure you set:
# export DOCKER_BUILDKIT=1

# use ARG instead ENV because ARG works over multiple stages, and ENV only in on stage
ARG BUILDDIR=/build

# DOCUMENTATION:
#
# from https://github.com/Z3Prover/z3 (README.md) how to build/install with gcc:
#
#     python scripts/mk_make.py
#     cd build
#     make
#     sudo make install
#
# options of configuring the build:
#
#     $ python3 scripts/mk_make.py --help
#     opt = --help, arg =
#     mk_make.py: Z3 Makefile generator
#
#     This script generates the Makefile for the Z3 theorem prover.
#     It must be executed from the Z3 root directory.
#
#     Options:
#       -h, --help                    display this message.
#       -s, --silent                  do not print verbose messages.
#       -p <dir>, --prefix=<dir>      installation prefix (default: /usr).
#       --pypkgdir=<dir>              Force a particular Python package directory (default /usr/lib/python3/dist-packages)
#       -b <subdir>, --build=<subdir>  subdirectory where Z3 will be built (default: build).
#       --githash=hash                include the given hash in the binaries.
#       --git-describe                include the output of 'git describe' in the version information.
#       -d, --debug                   compile Z3 in debug mode.
#       -t, --trace                   enable tracing in release mode.
#       --x86                         force 32-bit x86 build on x64 systems.
#       -m, --makefiles               generate only makefiles.
#       --dotnet                      generate .NET platform bindings.
#       --dotnet-key=<file>           sign the .NET assembly using the private key in <file>.
#       --java                        generate Java bindings.
#       --ml                          generate OCaml bindings.
#       --js                          generate JScript bindings.
#       --python                      generate Python bindings.
#       --staticlib                   build Z3 static library.
#       --staticbin                   build a statically linked Z3 binary.
#       -g, --gmp                     use GMP.
#       --gprof                       enable gprof
#       --log-sync                    synchronize access to API log files to enable multi-thread API logging.
#       --single-threaded             non-thread-safe build
#
#     Some influential environment variables:
#       CXX        C++ compiler
#       CC         C compiler
#       LDFLAGS    Linker flags, e.g., -L<lib dir> if you have libraries in a non-standard directory
#       CPPFLAGS   Preprocessor flags, e.g., -I<include dir> if you have header files in a non-standard directory
#       CXXFLAGS   C++ compiler flags
#       JDK_HOME   JDK installation directory (only relevant if -j or --java option is provided)
#       JNI_HOME   JNI bindings directory (only relevant if -j or --java option is provided)
#       OCAMLC     Ocaml byte-code compiler (only relevant with --ml)
#       OCAMLFIND  Ocaml find tool (only relevant with --ml)
#       OCAMLOPT   Ocaml native compiler (only relevant with --ml)
#       OCAML_LIB  Ocaml library directory (only relevant with --ml)
#       CSC        C# Compiler (only relevant if .NET bindings are enabled)
#       GACUTIL    GAC Utility (only relevant if .NET bindings are enabled)
#       Z3_INSTALL_BIN_DIR Install directory for binaries relative to install prefix
#       Z3_INSTALL_LIB_DIR Install directory for libraries relative to install prefix
#       Z3_INSTALL_INCLUDE_DIR Install directory for header files relative to install prefix
#       Z3_INSTALL_PKGCONFIG_DIR Install directory for pkgconfig files relative to install prefix

#############################
FROM ubuntu:16.04 AS build
#############################
ARG BUILDDIR

# Make persist in image
ENV BUILDDIR=$BUILDDIR 


WORKDIR ${BUILDDIR}

RUN apt-get update && \
  apt-get install -y \
  wget \
  python3 \
  binutils \
  gcc \
  g++ \
  make 
  
RUN wget  https://github.com/Z3Prover/z3/archive/z3-4.8.7.tar.gz
RUN tar xzvf z3-4.8.7.tar.gz
WORKDIR ${BUILDDIR}/z3-z3-4.8.7

# https://askubuntu.com/questions/308045/differences-between-bin-sbin-usr-bin-usr-sbin-usr-local-bin-usr-local
#  /usr/bin: for general system-wide binaries. 
#  /usr/local/bin: for system-wide available scripts. 
#                  The local path means it's not managed by the system packages (this is an error for Debian/Ubuntu packages).
#   ~/bin (a personal bin folder in your home directory): for user-scoped scripts
# note: 
#  The FHS says for /usr/local:
#    Tertiary hierarchy for local data, specific to this host. Typically has further subdirectories, e.g., bin/, lib/, share/.
#
# So prefer /usr/ above /usr/local because linux package system installs by default in /usr  => want to make package 
# Note: both in /usr/ and /usr/local you must install with sudo.
ENV PREFIX=/usr/
# IMPORTANT: we use option "--staticbin" to make statically linked z3 binary => easy to install by just only copying this binary
RUN python3 scripts/mk_make.py --prefix=$PREFIX  --staticbin
RUN cd build && make -j$(nproc) && make install DESTDIR=${BUILDDIR}/destdir
RUN tar -C ${BUILDDIR}/destdir  -czvf /z3-4.8.7.tgz  $(ls ${BUILDDIR}/destdir)  



#############################
FROM scratch AS dist
#############################
# make scratch image only containing z3-4.8.7.tgz file build
# usage:  docker build --target dist --output . .
# The build z3-4.8.7.tgz will be put in current directory! (--output .)
COPY --from=build /z3-4.8.7.tgz /