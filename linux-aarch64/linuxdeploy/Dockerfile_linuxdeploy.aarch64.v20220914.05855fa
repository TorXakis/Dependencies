########################################################################################################################
#                      USAGE
########################################################################################################################
# run below command on arm64 machine(eg. m1 macbook) and the build distribution file will be put in the ./dist/ folder
#
#    docker build -f Dockerfile_linuxdeploy.aarch64.v20220914.05855fa --target dist --output dist/ .
#
# Note: the resulting linuxdeploy.AppImage works on ubuntu16.04(verified) and newer !! 
#       Although linuxdeploy is build on 20.04 it builds static binaries which work on older linux versions.   
########################################################################################################################

# syntax = docker/dockerfile:1.3-labs


# This Dockerfile requires buildkit as backend, so make sure you set:
# export DOCKER_BUILDKIT=1

# use ARG instead ENV because ARG works over multiple stages, and ENV only in on stage
ARG BUILDDIR=/build


#############################
FROM ubuntu:20.04 AS build
#############################
ARG BUILDDIR

# Make persist in image
ENV BUILDDIR=$BUILDDIR 
ENV ARCH="arm64" 
ENV BUILD_TYPE="arm64-native"


# ######################################################################################
#  build /linuxdeploy-aarch64.AppImage without plugins
# ######################################################################################
#  references:
#   github workflow: https://github.com/linuxdeploy/linuxdeploy/blob/master/.github/workflows/main.yml 
#    build scripts using cmake:
#      https://github.com/linuxdeploy/linuxdeploy/blob/master/ci/build.sh
#.     https://github.com/linuxdeploy/linuxdeploy/blob/master/ci/build-static-binutils.sh
#.     https://github.com/linuxdeploy/linuxdeploy/blob/master/ci/build-static-patchelf.sh 



WORKDIR ${BUILDDIR}

# to prevent interactive questions when installing packages below
ARG DEBIAN_FRONTEND=noninteractive 

RUN apt-get update && \
  apt-get install -y \
  wget \
  vim \
  python3 \
  binutils \
  gcc \
  g++ \
  make \
  git \
  software-properties-common # for  apt-add-repository
  

# # install latest cmake
# # https://askubuntu.com/questions/355565/how-do-i-install-the-latest-version-of-cmake-from-the-command-line
# RUN  wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - |  tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
# RUN apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
RUN apt-get update &&  apt-get install -y cmake




# from https://github.com/linuxdeploy/linuxdeploy/blob/master/.github/workflows/main.yml 
#  sudo apt-get install -y gcovr libmagic-dev libjpeg-dev libpng-dev libboost-filesystem-dev libboost-regex-dev cimg-dev
RUN apt-get update && \
  apt-get install -y \
  gcovr \
  libmagic-dev \
  libjpeg-dev \
  libpng-dev \
  libboost-filesystem-dev\
  libboost-regex-dev \
  cimg-dev
  
   
   
# NOTE: fix linuxdeploy also to version 05855fa11a0da0821eec5c0d1a881030da020410  at 20220914 => v20220914.05855fa
# get source code linuxdeploy
RUN git clone https://github.com/linuxdeploy/linuxdeploy.git; \
    cd linuxdeploy; \
    git checkout 05855fa11a0da0821eec5c0d1a881030da020410;\
    git submodule init; \
    git submodule update




WORKDIR ${BUILDDIR}/linuxdeploy
# patch => replace x86_64 with *64*
RUN sed -i 's|"x86_64"|"arm64"|' ./ci/build.sh

RUN sed -i 's|"x86_64"|"arm64"|' ./ci/build-static-binutils.sh
RUN sed -i 's|"x86_64"|"arm64"|' ./ci/build-static-patchelf.sh

RUN sed -i 's|EXTRA_CMAKE_ARGS=()|EXTRA_CMAKE_ARGS=("-DBUILD_TESTING=OFF")|' ./ci/build.sh
# without above line which excludes building test code we get  error missing pthreads => didn't get it solved?? => so I disabled testing.
#   -- Configuring incomplete, errors occurred!
#   See also "/tmp/linuxdeploy-build-SR2FNU/CMakeFiles/CMakeOutput.log".
#   See also "/tmp/linuxdeploy-build-SR2FNU/CMakeFiles/CMakeError.log".
#   Performing C SOURCE FILE Test CMAKE_HAVE_LIBC_PTHREAD failed with the following output:
#   /usr/bin/cc  -DCHECK_FUNCTION_EXISTS=pthread_create -rdynamic CMakeFiles/cmTC_3cb13.dir/CheckFunctionExists.c.o -o cmTC_3cb13  -lpthreads
#   /usr/bin/ld: cannot find -lpthreads
#   collect2: error: ld returned 1 exit status
#
# note: option USE_CCACHE not needed  => can build also without (ccache improves performance if you repeat build after changes )
#        `-> requires ccache installed -> which I haven's -> so isn't used even option is ON

# background info cmake options
# -------------------------------
# when having problems with cmake build you could  play with the options in the build:    
#   with 'ccmake /linuxdeploy/'  (curses-gui) cmdline app we can easily turn off some option...
#        `->  apt-get install -y cmake-curses-gui
#
#   ccmake shows options : 
#            BUILD_GMOCK                      ON
#            BUILD_TESTING                    ON
#            CCACHE                           CCACHE-NOTFOUND
#            CIMG_H_DIR                       /usr/include
#            CImg_INCLUDE_DIR                 /usr/include
#            CMAKE_BUILD_TYPE
#            CMAKE_INSTALL_PREFIX             /usr/local
#            ENABLE_COVERAGE                  OFF
#            FETCHCONTENT_BASE_DIR            /build/build/_deps
#            FETCHCONTENT_FULLY_DISCONNECTE   OFF
#            FETCHCONTENT_QUIET               ON
#            FETCHCONTENT_SOURCE_DIR___LD_G
#            FETCHCONTENT_UPDATES_DISCONNEC   OFF
#            FETCHCONTENT_UPDATES_DISCONNEC   OFF
#            INSTALL_GTEST                    ON
#            USE_CCACHE                       ON  
#
#
# so we tried adding options to cmake command: 
#   -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_GMOCK=OFF -DBUILD_TESTING=OFF  -DUSE_CCACHE=OFF -DINSTALL_GTEST=OFF
# and this worked, we could narrow it down, and also only  
#   -DINSTALL_GTEST=OFF
# works!!   seems  only testing code needs newer version of cmake


RUN sed -i 's|https://github.com/Kitware/CMake/releases/download/v3.18.1/cmake-3.18.1-Linux-x86_64.tar.gz|https://github.com/Kitware/CMake/releases/download/v3.20.0/cmake-3.20.0-linux-aarch64.tar.gz|' ./ci/build.sh
RUN sed -i '68,$d' ./ci/build.sh 

#RUN sed -i 's|trap cleanup EXIT||' ./ci/build.sh

# get appimagetool
#  -> take older fixed version (12 at 20190501) of appimagetool because newest version (at 0220919) requires newer glibc then available in ubuntu 16.04
#     see: appimage_error_when_glibc_version_app_depends_on_is_newer_then_one_in_os.txt
# note: linuxdeploy itself doesn't depend on dynamic libs => so independentt of libc version (only dependent on syscalls!)
RUN wget -O /appimagetool-aarch64.AppImage https://github.com/AppImage/AppImageKit/releases/download/12/appimagetool-aarch64.AppImage &&\
    chmod +x /appimagetool-aarch64.AppImage

# add line to build script to construct AppImage  of linuxdeploy in /linuxdeploy-aarch64.AppImage
RUN echo '/appimagetool-aarch64.AppImage  --appimage-extract-and-run "AppDir" /linuxdeploy-aarch64.AppImage' >> ./ci/build.sh

# do build of /linuxdeploy-aarch64.AppImage
ENV CI=x
RUN ./ci/build.sh

#  cleanup
WORKDIR ${BUILDDIR}/
RUN rm -rf ${BUILDDIR}/*

# NOW we have /linuxdeploy-$ARCH.AppImage


# ######################################################################################
#  build linuxdeploy-plugin-appimage plugin and add it to /linuxdeploy-aarch64.AppImage
# ######################################################################################
##  instructions src: https://github.com/linuxdeploy/linuxdeploy-plugin-appimage/blob/master/ci/build-appimage.sh

#  build linuxdeploy-plugin-appimage AppDir (not AppImage)
# -----------------------------------------

# fix linuxdeploy-plugin-appimage. also to version 779bd58443e8cc92a28b4543e3a6fb813745998e  at 20220916
RUN git clone https://github.com/linuxdeploy/linuxdeploy-plugin-appimage.git; \
    cd linuxdeploy-plugin-appimage; \
    git checkout 779bd58443e8cc92a28b4543e3a6fb813745998e;\
    git submodule init; \
    git submodule update

WORKDIR ${BUILDDIR}/linuxdeploy-plugin-appimage

RUN sed -i 's|"x86_64"|"arm64"|' ./ci/build-appimage.sh
RUN sed -i '43,$d' ./ci/build-appimage.sh
# at end mv "AppDir/" result to "$OLD_CWD" which is our current workdir
RUN echo 'mv AppDir "$OLD_CWD"' >> ./ci/build-appimage.sh
RUN ./ci/build-appimage.sh



# embed appimagetool into linuxdeploy-plugin-appimage AppDir
#------------------------------------------------------------

# extract appimagetool and add to Appdir (of linuxdeploy-plugin-appimage)
RUN  /appimagetool-aarch64.AppImage --appimage-extract; \
    mv squashfs-root/ AppDir/appimagetool-prefix/; \
    ln -s ../../appimagetool-prefix/AppRun AppDir/usr/bin/appimagetool

# with linuxdeploy add dependencies into linuxdeploy-plugin-appimage  AppDir 
#--------------------------------------------------------------------------


# run /linuxdeploy-aarch64.AppImage on  Appdir (of linuxdeploy-plugin-appimage)
ENV export UPD_INFO="gh-releases-zsync|linuxdeploy|linuxdeploy-plugin-appimage|continuous|linuxdeploy-plugin-appimage-aarch64.AppImage"
RUN /linuxdeploy-aarch64.AppImage --appimage-extract-and-run \
    --appdir ./AppDir -d ./resources/linuxdeploy-plugin-appimage.desktop \
    -i ./resources/linuxdeploy-plugin-appimage.svg



#  add linuxdeploy-plugin-appimage AppDir as internal plugin to /linuxdeploy-aarch64.AppImage
# ------------------------------------------------------------------------------------------

WORKDIR ${BUILDDIR}/

# extract  /linuxdeploy-aarch64.AppImage and  extract /linuxdeploy-plugin-appimage-aarch64.AppImage
# and add /linuxdeploy-plugin-appimage-aarch64.AppImage
RUN /linuxdeploy-aarch64.AppImage --appimage-extract && mv squashfs-root AppDir && mkdir AppDir/plugins/


# add linuxdeploy-plugin-appimage/AppDir as plugin to linuxdeploy's appdir
RUN mv ${BUILDDIR}/linuxdeploy-plugin-appimage/AppDir AppDir/plugins/linuxdeploy-plugin-appimage &&\
    ln -s ../../plugins/linuxdeploy-plugin-appimage/AppRun AppDir/usr/bin/linuxdeploy-plugin-appimage

RUN mv /linuxdeploy-aarch64.AppImage /linuxdeploy-aarch64.noplugins.AppImage


# make appimage 'linuxdeploy-plugin-appimage' from  Appdir (of linuxdeploy-plugin-appimage)
RUN /appimagetool-aarch64.AppImage  --appimage-extract-and-run \
    AppDir /linuxdeploy-aarch64.AppImage


# FINAL RESULT:  linuxdeploy-aarch64.AppImage  linuxdeploy-aarch64.noplugins.AppImage


#############################
FROM scratch AS dist
#############################
# example usage:
#    docker build -f Dockerfile_linuxdeploy.aarch64.v20220914.05855fa --target dist --output dist/ .

# date of linuxdeploy repository
ENV VERSION="v20220914.05855fa" 
COPY --from=build /linuxdeploy-aarch64.AppImage /linuxdeploy-aarch64.$VERSION.AppImage


